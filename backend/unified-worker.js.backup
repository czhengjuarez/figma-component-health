// Unified Cloudflare Worker for Figma Component Health
// Serves both API endpoints and static frontend files

// Helper function to make Figma API requests with SSL certificate handling
async function figmaApiRequest(endpoint, token) {
  const url = `https://api.figma.com/v1${endpoint}`;
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'X-Figma-Token': token,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error(`Figma API error: ${response.status} ${response.statusText}`);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Figma API request failed:', error);
    throw error;
  }
}

// Helper function to make Figma internal API requests (for Library Analytics)
async function figmaInternalApiRequest(endpoint, token) {
  const url = `https://www.figma.com/api${endpoint}`;
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'X-Figma-Token': token,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error(`Figma Internal API error: ${response.status} ${response.statusText}`);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Figma Internal API request failed:', error);
    throw error;
  }
}

// Helper function to fetch Figma Library Analytics data (Enterprise API)
async function fetchLibraryAnalytics(fileKey, token) {
  try {
    console.log(`Fetching Library Analytics for file: ${fileKey}`);
    
    // Try the correct Library Analytics endpoints from Figma's internal API
    let libraryData = null;
    let teamUsageData = null;
    
    try {
      // Get basic library data
      console.log(`Trying library endpoint: /dsa/library/${fileKey}`);
      libraryData = await figmaInternalApiRequest(`/dsa/library/${fileKey}`, token);
      console.log('Library data response:', JSON.stringify(libraryData, null, 2));
    } catch (error) {
      console.log(`Library endpoint failed:`, error.message);
    }
    
    try {
      // Get team usage data for last 30 days
      const endTs = Math.floor(Date.now() / 1000); // Current time in seconds
      const startTs = endTs - (30 * 24 * 60 * 60); // 30 days ago
      
      console.log(`Trying team usage endpoint: /dsa/library/${fileKey}/team_usage?start_ts=${startTs}&end_ts=${endTs}`);
      teamUsageData = await figmaInternalApiRequest(`/dsa/library/${fileKey}/team_usage?start_ts=${startTs}&end_ts=${endTs}`, token);
      console.log('Team usage data response:', JSON.stringify(teamUsageData, null, 2));
    } catch (error) {
      console.log(`Team usage endpoint failed:`, error.message);
    }
    
    if (!libraryData && !teamUsageData) {
      console.log('No Library Analytics data available - may not be Enterprise plan or published library');
      return null;
    }
    
    // Process the data from the internal API responses
    const analytics = libraryData?.meta || {};
    const teamUsage = teamUsageData?.meta || [];
    
    // Calculate enterprise metrics from internal API structure
    const totalInsertions = analytics.num_weekly_insertions || 0;
    const activeTeams = Array.isArray(teamUsage) ? teamUsage.length : (analytics.num_teams || 0);
    const totalComponents = analytics.num_components || 0;
    
    // Calculate team usage data
    let totalTeamInsertions = 0;
    if (Array.isArray(teamUsage)) {
      teamUsage.forEach(team => {
        totalTeamInsertions += team.num_insertions || 0;
      });
    }
    
    return {
      totalInsertions: totalTeamInsertions || totalInsertions,
      activeTeams,
      totalComponents,
      adoptionRate: totalComponents > 0 ? Math.round((totalInsertions / totalComponents) * 100) / 100 : 0,
      averageUsageScore: totalComponents > 0 ? Math.round((totalInsertions / totalComponents) * 10) / 10 : 0,
      teamUsage: Array.isArray(teamUsage) ? teamUsage.map(team => ({
        teamName: team.team_name || 'Unknown Team',
        insertions: team.num_insertions || 0,
        detachments: team.num_detachments || 0
      })) : []
    };
  } catch (error) {
    console.error('Error fetching Library Analytics:', error);
    return null;
  }
}

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Figma-Token',
  'Access-Control-Max-Age': '86400',
};

// Main request handler
export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    const path = url.pathname;

    // Handle CORS preflight requests
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        status: 200,
        headers: corsHeaders
      });
    }

    // API endpoints
    if (path.startsWith('/api/')) {
      return handleApiRequest(request, path, env);
    }

    // Static file serving - serve built frontend files
    return handleStaticFiles(request, path);
  }
};

// Handle API requests
async function handleApiRequest(request, path, env) {
  try {
    if (path === '/api/health') {
      return handleHealthCheck();
    }

    if (path === '/api/analyze') {
      return handleAnalyze(request, env);
    }

    if (path === '/api/analytics/enterprise-summary') {
      return handleEnterpriseSummary(request, env);
    }

    if (path === '/api/analytics/usage-trends') {
      return handleUsageTrends(request, env);
    }

    return new Response('API endpoint not found', { 
      status: 404, 
      headers: corsHeaders 
    });
  } catch (error) {
    console.error('API request error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}

// Handle static file requests
async function handleStaticFiles(request, path) {
  // Serve the main HTML file for root and any non-asset paths
  if (path === '/' || (!path.startsWith('/assets/') && !path.includes('.'))) {
    const html = `<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Figma Component Health</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/prop-types@15.8.1/prop-types.min.js"></script>
    <script src="https://unpkg.com/recharts@2.8.0/umd/Recharts.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide-react@0.263.1/dist/umd/lucide-react.js"></script>
  </head>
  <body>
    <div id="root"></div>
    <script type="text/babel">
      const { useState, useEffect } = React;
      const { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;
      const { AlertTriangle, Info, TrendingUp, FileText, Search, AlertCircle, Layers, ArrowUpRight, Box } = LucideReact;

      function App() {
        const [figmaToken, setFigmaToken] = useState('');
        const [fileKey, setFileKey] = useState('');
        const [loading, setLoading] = useState(false);
        const [data, setData] = useState(null);
        const [error, setError] = useState('');
        const [enterpriseMode, setEnterpriseMode] = useState(false);
        const [enterpriseAnalytics, setEnterpriseAnalytics] = useState(null);
        const [usageTrends, setUsageTrends] = useState(null);

        const analyzeFile = async () => {
          if (!figmaToken || !fileKey) {
            setError('Please provide both Figma token and file key');
            return;
          }

          setLoading(true);
          setError('');
          setData(null);

          try {
            const response = await fetch('/api/analyze', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ figmaToken, fileKey })
            });

            const result = await response.json();
            
            if (!response.ok) {
              throw new Error(result.error || 'Analysis failed');
            }

            setData(result);
            
            if (enterpriseMode) {
              try {
                const [summaryRes, trendsRes] = await Promise.all([
                  fetch('/api/analytics/enterprise-summary', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ figmaToken, fileKey })
                  }),
                  fetch('/api/analytics/usage-trends', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ figmaToken, fileKey })
                  })
                ]);

                if (summaryRes.ok) {
                  const summaryData = await summaryRes.json();
                  setEnterpriseAnalytics(summaryData);
                }

                if (trendsRes.ok) {
                  const trendsData = await trendsRes.json();
                  setUsageTrends(trendsData);
                }
              } catch (err) {
                console.log('Enterprise analytics not available:', err.message);
              }
            }
          } catch (err) {
            setError(err.message);
          } finally {
            setLoading(false);
          }
        };

        return (
          <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50">
            <div className="container mx-auto px-4 py-8">
              <div className="text-center mb-12">
                <div className="flex items-center justify-center mb-4">
                  <Box className="w-8 h-8 text-indigo-600 mr-3" />
                  <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    Figma Component Health
                  </h1>
                </div>
                <p className="text-xl text-gray-600 max-w-2xl mx-auto">
                  Analyze your component library health, track usage patterns, and optimize your design system
                </p>
              </div>

              <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8 mb-8 max-w-4xl mx-auto">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      Figma Token
                      <Info className="w-4 h-4 inline ml-1 text-gray-400" />
                    </label>
                    <input
                      type="password"
                      value={figmaToken}
                      onChange={(e) => setFigmaToken(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                      placeholder="figd_..."
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      File Key
                      <Info className="w-4 h-4 inline ml-1 text-gray-400" />
                    </label>
                    <input
                      type="text"
                      value={fileKey}
                      onChange={(e) => setFileKey(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                      placeholder="abc123def456..."
                    />
                  </div>
                </div>

                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="enterprise-mode"
                      checked={enterpriseMode}
                      onChange={(e) => setEnterpriseMode(e.target.checked)}
                      className="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                    />
                    <label htmlFor="enterprise-mode" className="ml-2 text-sm text-gray-700 flex items-center">
                      <TrendingUp className="w-4 h-4 mr-1" />
                      Enable Enterprise Analytics
                    </label>
                  </div>
                  
                  <button
                    onClick={analyzeFile}
                    disabled={loading || !figmaToken || !fileKey}
                    className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-3 rounded-xl hover:from-indigo-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-semibold flex items-center"
                  >
                    {loading ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Analyzing...
                      </>
                    ) : (
                      <>
                        <Search className="w-4 h-4 mr-2" />
                        Analyze Components
                      </>
                    )}
                  </button>
                </div>

                {error && (
                  <div className="mt-6 p-4 bg-red-50 border-l-4 border-red-400 rounded-lg">
                    <div className="flex items-start">
                      <AlertCircle className="w-5 h-5 text-red-400 mt-0.5 mr-3 flex-shrink-0" />
                      <div>
                        <h3 className="text-sm font-medium text-red-800">Analysis Error</h3>
                        <p className="text-sm text-red-700 mt-1">{error}</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {data && (
                <div className="space-y-8">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600">Total Components</p>
                          <p className="text-3xl font-bold text-gray-900">{data.summary?.totalComponents || 0}</p>
                        </div>
                        <Layers className="w-8 h-8 text-indigo-600" />
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600">Well Documented</p>
                          <p className="text-3xl font-bold text-green-600">{data.summary?.wellDocumented || 0}</p>
                        </div>
                        <FileText className="w-8 h-8 text-green-600" />
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600">Deprecated</p>
                          <p className="text-3xl font-bold text-orange-600">{data.summary?.deprecatedComponents || 0}</p>
                        </div>
                        <AlertTriangle className="w-8 h-8 text-orange-600" />
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-gray-600">Recent Updates</p>
                          <p className="text-3xl font-bold text-blue-600">{data.summary?.recentUpdates || 0}</p>
                        </div>
                        <ArrowUpRight className="w-8 h-8 text-blue-600" />
                      </div>
                    </div>
                  </div>

                  {enterpriseMode && enterpriseAnalytics && (
                    <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
                      <h2 className="text-2xl font-bold text-gray-900 mb-8 flex items-center">
                        <TrendingUp className="w-6 h-6 mr-3 text-indigo-600" />
                        Enterprise Analytics
                      </h2>
                      
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                        <div className="text-center p-4 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl">
                          <div className="text-3xl font-bold text-purple-600">{enterpriseAnalytics.totalInsertions?.toLocaleString()}</div>
                          <div className="text-sm text-gray-600 mt-1">Total Insertions</div>
                        </div>
                        <div className="text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl">
                          <div className="text-3xl font-bold text-green-600">{enterpriseAnalytics.weeklyInsertions?.toLocaleString()}</div>
                          <div className="text-sm text-gray-600 mt-1">Weekly Insertions</div>
                        </div>
                        <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl">
                          <div className="text-3xl font-bold text-blue-600">{enterpriseAnalytics.activeTeams}</div>
                          <div className="text-sm text-gray-600 mt-1">Active Teams</div>
                        </div>
                        <div className="text-center p-4 bg-gradient-to-br from-orange-50 to-yellow-50 rounded-xl">
                          <div className="text-3xl font-bold text-orange-600">{enterpriseAnalytics.adoptionRate}%</div>
                          <div className="text-sm text-gray-600 mt-1">Adoption Rate</div>
                        </div>
                      </div>

                      {usageTrends && usageTrends.weeks && (
                        <div className="mt-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4">Usage Trends</h3>
                          <div style={{ width: '100%', height: 400 }}>
                            <ResponsiveContainer>
                              <LineChart data={usageTrends.weeks}>
                                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                                <XAxis dataKey="week" stroke="#6b7280" />
                                <YAxis stroke="#6b7280" />
                                <Tooltip 
                                  contentStyle={{ 
                                    backgroundColor: 'white', 
                                    border: '1px solid #e5e7eb',
                                    borderRadius: '8px',
                                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                                  }} 
                                />
                                <Legend />
                                <Line type="monotone" dataKey="insertions" stroke="#8884d8" strokeWidth={2} />
                                <Line type="monotone" dataKey="detachments" stroke="#82ca9d" strokeWidth={2} />
                              </LineChart>
                            </ResponsiveContainer>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {data.components && data.components.length > 0 && (
                    <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
                      <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                        <Layers className="w-6 h-6 mr-3 text-indigo-600" />
                        Component Inventory
                      </h2>
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Health Score</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Page</th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {data.components.map((component, index) => (
                              <tr key={component.id || index}>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <div className="text-sm font-medium text-gray-900">{component.name}</div>
                                  <div className="text-sm text-gray-500">{component.description || 'No description'}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <span className={\`px-2 py-1 text-xs font-semibold rounded-full \${
                                    component.healthScore >= 80 ? 'bg-green-100 text-green-800' :
                                    component.healthScore >= 60 ? 'bg-yellow-100 text-yellow-800' :
                                    'bg-red-100 text-red-800'
                                  }\`}>
                                    {component.healthScore || 0}
                                  </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {component.type || 'Component'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  {component.pageName || 'Unknown'}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        );
      }

      ReactDOM.render(<App />, document.getElementById('root'));
    </script>
  </body>
</html>`;

          try {
            const response = await fetch('/api/analyze', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ figmaToken, fileKey })
            });

            const result = await response.json();
            
            if (!response.ok) {
              throw new Error(result.error || 'Analysis failed');
            }

            setData(result);
            
            // Fetch enterprise analytics if available
            if (enterpriseMode) {
              try {
                const [summaryRes, trendsRes] = await Promise.all([
                  fetch('/api/analytics/enterprise-summary', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ figmaToken, fileKey })
                  }),
                  fetch('/api/analytics/usage-trends', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ figmaToken, fileKey })
                  })
                ]);

                if (summaryRes.ok) {
                  const summaryData = await summaryRes.json();
                  setEnterpriseAnalytics(summaryData);
                }

                if (trendsRes.ok) {
                  const trendsData = await trendsRes.json();
                  setUsageTrends(trendsData);
                }
              } catch (err) {
                console.log('Enterprise analytics not available:', err.message);
              }
            }
          } catch (err) {
            setError(err.message);
          } finally {
            setLoading(false);
          }
        };

        return (
          <div className="min-h-screen bg-gradient-to-r from-purple-50 to-blue-50 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-7xl mx-auto">
              <div className="text-center mb-12">
                <h1 className="text-3xl font-bold text-gray-900 mb-4">
                  Figma Component Health Dashboard
                </h1>
                <p className="text-lg text-gray-600">
                  Analyze your Figma component library health and usage patterns
                </p>
              </div>

              <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Figma Token
                    </label>
                    <input
                      type="password"
                      value={figmaToken}
                      onChange={(e) => setFigmaToken(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter your Figma token"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      File Key
                    </label>
                    <input
                      type="text"
                      value={fileKey}
                      onChange={(e) => setFileKey(e.target.value)}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter Figma file key"
                    />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="enterprise-mode"
                      checked={enterpriseMode}
                      onChange={(e) => setEnterpriseMode(e.target.checked)}
                      className="mr-2"
                    />
                    <label htmlFor="enterprise-mode" className="text-sm text-gray-700">
                      Enable Enterprise Analytics
                    </label>
                  </div>
                  
                  <button
                    onClick={analyzeFile}
                    disabled={loading}
                    className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {loading ? 'Analyzing...' : 'Analyze Components'}
                  </button>
                </div>

                {error && (
                  <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-700">{error}</p>
                  </div>
                )}
              </div>

              {data && (
                <div className="space-y-8">
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                    <div className="bg-white rounded-lg shadow-sm p-6">
                      <div className="text-2xl font-bold text-gray-900">{data.summary.totalComponents}</div>
                      <div className="text-sm text-gray-600">Total Components</div>
                    </div>
                    <div className="bg-white rounded-lg shadow-sm p-6">
                      <div className="text-2xl font-bold text-green-600">{data.summary.wellDocumented}</div>
                      <div className="text-sm text-gray-600">Well Documented</div>
                    </div>
                    <div className="bg-white rounded-lg shadow-sm p-6">
                      <div className="text-2xl font-bold text-orange-600">{data.summary.deprecatedComponents}</div>
                      <div className="text-sm text-gray-600">Deprecated</div>
                    </div>
                    <div className="bg-white rounded-lg shadow-sm p-6">
                      <div className="text-2xl font-bold text-blue-600">{data.summary.recentUpdates}</div>
                      <div className="text-sm text-gray-600">Recent Updates</div>
                    </div>
                  </div>

                  {enterpriseMode && enterpriseAnalytics && (
                    <div className="bg-white rounded-lg shadow-lg p-6">
                      <h2 className="text-xl font-bold text-gray-900 mb-6">Enterprise Analytics</h2>
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-purple-600">{enterpriseAnalytics.totalInsertions}</div>
                          <div className="text-sm text-gray-600">Total Insertions</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-green-600">{enterpriseAnalytics.weeklyInsertions}</div>
                          <div className="text-sm text-gray-600">Weekly Insertions</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-blue-600">{enterpriseAnalytics.activeTeams}</div>
                          <div className="text-sm text-gray-600">Active Teams</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-orange-600">{enterpriseAnalytics.adoptionRate}%</div>
                          <div className="text-sm text-gray-600">Adoption Rate</div>
                        </div>
                      </div>

                      {usageTrends && usageTrends.weeks && (
                        <div className="mt-8">
                          <h3 className="text-lg font-semibold text-gray-900 mb-4">Usage Trends</h3>
                          <div style={{ width: '100%', height: 300 }}>
                            <ResponsiveContainer>
                              <LineChart data={usageTrends.weeks}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="week" />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Line type="monotone" dataKey="insertions" stroke="#8884d8" />
                                <Line type="monotone" dataKey="detachments" stroke="#82ca9d" />
                              </LineChart>
                            </ResponsiveContainer>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  <div className="bg-white rounded-lg shadow-lg p-6">
                    <h2 className="text-xl font-bold text-gray-900 mb-6">Component Inventory</h2>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Health Score</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Page</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {data.components.map((component) => (
                            <tr key={component.id}>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <div className="text-sm font-medium text-gray-900">{component.name}</div>
                                <div className="text-sm text-gray-500">{component.description || 'No description'}</div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className={\`px-2 py-1 text-xs font-semibold rounded-full \${
                                  component.healthScore >= 80 ? 'bg-green-100 text-green-800' :
                                  component.healthScore >= 60 ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-red-100 text-red-800'
                                }\`}>
                                  {component.healthScore}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {component.type}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {component.pageName}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        );
      }

      ReactDOM.render(<App />, document.getElementById('root'));
    </script>
  </body>
</html>`;
    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  // Handle built assets - return 404 since we can't embed large files in worker
  if (path.startsWith('/assets/')) {
    return new Response('Asset not found - using CDN fallback', { status: 404 });
  }

  // Handle favicon
  if (path === '/favicon.ico') {
    return new Response('', { status: 404 });
  }

  // Return 404 for any other static files
  return new Response('Not found', { status: 404 });
}

// Health check endpoint
async function handleHealthCheck() {
  return new Response(JSON.stringify({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    service: 'Figma Component Health - Unified Worker'
  }), {
    status: 200,
    headers: { ...corsHeaders, 'Content-Type': 'application/json' }
  });
}

// Analyze endpoint
async function handleAnalyze(request, env) {
  const { figmaToken, fileKey } = await request.json();

  if (!figmaToken || !fileKey) {
    return new Response(JSON.stringify({ error: 'Missing figmaToken or fileKey' }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    // Fetch file data from Figma API
    const fileData = await figmaApiRequest(`/files/${fileKey}`, figmaToken);
    
    // Check if this is a published library
    const isPublishedLibrary = fileData.publishedComponents && Object.keys(fileData.publishedComponents).length > 0;
    
    if (!isPublishedLibrary) {
      return new Response(JSON.stringify({
        error: 'This file is not a published component library. Please analyze a published Figma library to see component health metrics.',
        isLibrary: false
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Analyze components
    const components = analyzeComponents(fileData);
    const summary = generateSummary(components);
    
    // Try to fetch enterprise analytics
    let enterpriseAnalytics = null;
    try {
      enterpriseAnalytics = await fetchLibraryAnalytics(fileKey, figmaToken);
    } catch (error) {
      console.log('Enterprise analytics not available:', error.message);
    }

    return new Response(JSON.stringify({
      fileKey,
      fileName: fileData.name,
      components,
      summary,
      enterpriseAnalytics
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Analysis error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}

// Enterprise summary endpoint
async function handleEnterpriseSummary(request, env) {
  const { figmaToken, fileKey } = await request.json();

  if (!figmaToken || !fileKey) {
    return new Response(JSON.stringify({ error: 'Missing figmaToken or fileKey' }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    // Calculate date ranges
    const now = new Date();
    const startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    const weekStartDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const weekStartDateStr = weekStartDate.toISOString().split('T')[0];

    // Fetch real Figma API data
    const [actionsResponse, weeklyActionsResponse, usagesResponse, teamUsagesResponse] = await Promise.allSettled([
      figmaApiRequest(`/analytics/libraries/${fileKey}/component/actions?group_by=component&start_date=${startDate}`, figmaToken),
      figmaApiRequest(`/analytics/libraries/${fileKey}/component/actions?group_by=component&start_date=${weekStartDateStr}`, figmaToken),
      figmaApiRequest(`/analytics/libraries/${fileKey}/component/usages?group_by=component`, figmaToken),
      figmaApiRequest(`/analytics/libraries/${fileKey}/component/usages?group_by=file`, figmaToken)
    ]);

    // Process successful responses
    const actions = actionsResponse.status === 'fulfilled' ? actionsResponse.value : null;
    const weeklyActions = weeklyActionsResponse.status === 'fulfilled' ? weeklyActionsResponse.value : null;
    const usages = usagesResponse.status === 'fulfilled' ? usagesResponse.value : null;
    const teamUsages = teamUsagesResponse.status === 'fulfilled' ? teamUsagesResponse.value : null;

    // Calculate metrics from real API data
    let totalInsertions = 0;
    let weeklyInsertions = 0;
    let activeTeams = 0;
    let adoptionRate = 0;
    let averageUsageScore = 0;

    if (actions?.rows) {
      totalInsertions = actions.rows.reduce((sum, row) => sum + (row.insertions || 0), 0);
    }

    if (weeklyActions?.rows) {
      weeklyInsertions = weeklyActions.rows.reduce((sum, row) => sum + (row.insertions || 0), 0);
    }

    if (teamUsages?.rows) {
      const uniqueTeams = new Set();
      teamUsages.rows.forEach(row => {
        if (row.team_name && !row.team_name.includes('not visible') && !row.team_name.includes('<Drafts>')) {
          uniqueTeams.add(row.team_name);
        }
      });
      activeTeams = uniqueTeams.size;
    }

    if (usages?.rows && usages.rows.length > 0) {
      const totalUsages = usages.rows.reduce((sum, row) => sum + (row.usages || 0), 0);
      adoptionRate = Math.round((totalUsages / usages.rows.length) * 100) / 100;
      averageUsageScore = Math.round((totalUsages / usages.rows.length) * 10) / 10;
    }

    // Only use real API data - no fallback to mock data
    if (!actions && !usages) {
      return new Response(JSON.stringify({ 
        error: 'Unable to fetch analytics data from Figma API. This may be because the file is not a published library or your account does not have access to analytics data.',
        details: 'Enterprise analytics require a published component library and appropriate permissions.'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const summary = {
      totalInsertions,
      weeklyInsertions,
      activeTeams,
      adoptionRate,
      averageUsageScore,
      calculationMethod: 'real_api_data',
      metadata: {
        dataSource: 'figma_analytics_api',
        dateRange: `${startDate} to ${now.toISOString().split('T')[0]}`,
        weeklyRange: `${weekStartDateStr} to ${now.toISOString().split('T')[0]}`,
        scale: 'enterprise_level'
      },
      rawData: {
        actions: actions?.rows || [],
        weeklyActions: weeklyActions?.rows || [],
        usages: usages?.rows || [],
        teamUsages: teamUsages?.rows || []
      }
    };

    return new Response(JSON.stringify(summary), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Enterprise summary error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}

// Usage trends endpoint
async function handleUsageTrends(request, env) {
  const { figmaToken, fileKey } = await request.json();

  if (!figmaToken || !fileKey) {
    return new Response(JSON.stringify({ error: 'Missing figmaToken or fileKey' }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    // Fetch real usage trends data only
    const now = new Date();
    const startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    const trendsData = await figmaApiRequest(`/analytics/libraries/${fileKey}/component/actions?group_by=week&start_date=${startDate}`, figmaToken);

    if (!trendsData?.rows) {
      return new Response(JSON.stringify({ 
        error: 'Unable to fetch usage trends from Figma API. This may be because the file is not a published library or your account does not have access to analytics data.',
        details: 'Usage trends require a published component library and appropriate permissions.'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const trends = {
      weeks: trendsData.rows,
      metadata: {
        dataSource: 'figma_analytics_api',
        dateRange: `${startDate} to ${now.toISOString().split('T')[0]}`,
        scale: 'enterprise_level',
        weeklyRange: '12_weeks'
      },
      calculationMethod: 'real_api_data'
    };

    return new Response(JSON.stringify(trends), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Usage trends error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
}

// Component analysis functions
function analyzeComponents(fileData) {
  const components = [];
  const publishedComponents = fileData.publishedComponents || {};
  
  // Traverse the document tree to find components
  function traverseNode(node, pageName = '') {
    if (node.type === 'COMPONENT' || node.type === 'COMPONENT_SET') {
      const componentId = node.id;
      const publishedInfo = publishedComponents[componentId];
      
      if (publishedInfo) {
        const component = {
          id: componentId,
          name: node.name,
          description: publishedInfo.description || '',
          usageCount: 0, // This would come from usage analytics
          isOrphaned: false,
          isDeprecated: false,
          healthScore: calculateHealthScore(node, publishedInfo),
          type: node.type,
          variants: node.type === 'COMPONENT_SET' ? (node.children?.length || 0) : 1,
          pageName: pageName,
          thumbnail_url: publishedInfo.thumbnail_url || '',
          lastModified: fileData.lastModified,
          firstUsed: null // This would come from usage analytics
        };
        
        components.push(component);
      }
    }
    
    if (node.children) {
      node.children.forEach(child => traverseNode(child, pageName));
    }
  }
  
  // Traverse all pages
  if (fileData.document && fileData.document.children) {
    fileData.document.children.forEach(page => {
      if (page.type === 'CANVAS') {
        traverseNode(page, page.name);
      }
    });
  }
  
  return components;
}

function calculateHealthScore(node, publishedInfo) {
  let score = 50; // Base score
  
  // Documentation score (0-30 points)
  if (publishedInfo.description && publishedInfo.description.trim().length > 0) {
    score += Math.min(30, publishedInfo.description.length / 10);
  }
  
  // Naming convention score (0-20 points)
  if (node.name && /^[A-Z][a-zA-Z0-9]*\//.test(node.name)) {
    score += 20;
  } else if (node.name && /^[A-Z]/.test(node.name)) {
    score += 10;
  }
  
  return Math.min(100, Math.round(score));
}

function generateSummary(components) {
  const totalComponents = components.length;
  const wellDocumented = components.filter(c => c.description && c.description.length > 10).length;
  const deprecatedComponents = components.filter(c => c.isDeprecated).length;
  const recentUpdates = components.filter(c => {
    const lastModified = new Date(c.lastModified);
    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    return lastModified > thirtyDaysAgo;
  }).length;
  
  return {
    totalComponents,
    wellDocumented,
    deprecatedComponents,
    recentUpdates
  };
}
