    <!doctype html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Figma Component Health</title>
        <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
        <script src="https://unpkg.com/prop-types@15.8.1/prop-types.min.js"></script>
        <script src="https://unpkg.com/recharts@2.8.0/umd/Recharts.js"></script>
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://unpkg.com/lucide-react@0.263.1/dist/umd/lucide-react.js"></script>
      </head>
      <body>
        <div id="root"></div>
        <script type="text/babel">
          const { useState, useEffect } = React;
          const { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;
          const { AlertTriangle, Info, TrendingUp, FileText, Search, AlertCircle, Layers, ArrowUpRight, Box } = LucideReact;
    
          function App() {
            const [figmaToken, setFigmaToken] = useState('');
            const [fileKey, setFileKey] = useState('');
            const [loading, setLoading] = useState(false);
            const [data, setData] = useState(null);
            const [error, setError] = useState('');
            const [enterpriseMode, setEnterpriseMode] = useState(false);
            const [enterpriseAnalytics, setEnterpriseAnalytics] = useState(null);
            const [usageTrends, setUsageTrends] = useState(null);
    
            const analyzeFile = async () => {
              if (!figmaToken || !fileKey) {
                setError('Please provide both Figma token and file key');
                return;
              }
    
              setLoading(true);
              setError('');
              setData(null);
    
              try {
                const response = await fetch('/api/analyze', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ figmaToken, fileKey })
                });
    
                const result = await response.json();
                
                if (!response.ok) {
                  throw new Error(result.error || 'Analysis failed');
                }
    
                setData(result);
                
                if (enterpriseMode) {
                  try {
                    const [summaryRes, trendsRes] = await Promise.all([
                      fetch('/api/analytics/enterprise-summary', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ figmaToken, fileKey })
                      }),
                      fetch('/api/analytics/usage-trends', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ figmaToken, fileKey })
                      })
                    ]);
    
                    if (summaryRes.ok) {
                      const summaryData = await summaryRes.json();
                      setEnterpriseAnalytics(summaryData);
                    }
    
                    if (trendsRes.ok) {
                      const trendsData = await trendsRes.json();
                      setUsageTrends(trendsData);
                    }
                  } catch (err) {
                    console.log('Enterprise analytics not available:', err.message);
                  }
                }
              } catch (err) {
                setError(err.message);
              } finally {
                setLoading(false);
              }
            };
    
            return (
              <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-cyan-50">
                <div className="container mx-auto px-4 py-8">
                  <div className="text-center mb-12">
                    <div className="flex items-center justify-center mb-4">
                      <Box className="w-8 h-8 text-indigo-600 mr-3" />
                      <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                        Figma Component Health
                      </h1>
                    </div>
                    <p className="text-xl text-gray-600 max-w-2xl mx-auto">
                      Analyze your component library health, track usage patterns, and optimize your design system
                    </p>
                  </div>
    
                  <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8 mb-8 max-w-4xl mx-auto">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          Figma Token
                          <Info className="w-4 h-4 inline ml-1 text-gray-400" />
                        </label>
                        <input
                          type="password"
                          value={figmaToken}
                          onChange={(e) => setFigmaToken(e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                          placeholder="figd_..."
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          File Key
                          <Info className="w-4 h-4 inline ml-1 text-gray-400" />
                        </label>
                        <input
                          type="text"
                          value={fileKey}
                          onChange={(e) => setFileKey(e.target.value)}
                          className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
                          placeholder="abc123def456..."
                        />
                      </div>
                    </div>
    
                    <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="enterprise-mode"
                          checked={enterpriseMode}
                          onChange={(e) => setEnterpriseMode(e.target.checked)}
                          className="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                        />
                        <label htmlFor="enterprise-mode" className="ml-2 text-sm text-gray-700 flex items-center">
                          <TrendingUp className="w-4 h-4 mr-1" />
                          Enable Enterprise Analytics
                        </label>
                      </div>
                      
                      <button
                        onClick={analyzeFile}
                        disabled={loading || !figmaToken || !fileKey}
                        className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-3 rounded-xl hover:from-indigo-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-semibold flex items-center"
                      >
                        {loading ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                            Analyzing...
                          </>
                        ) : (
                          <>
                            <Search className="w-4 h-4 mr-2" />
                            Analyze Components
                          </>
                        )}
                      </button>
                    </div>
    
                    {error && (
                      <div className="mt-6 p-4 bg-red-50 border-l-4 border-red-400 rounded-lg">
                        <div className="flex items-start">
                          <AlertCircle className="w-5 h-5 text-red-400 mt-0.5 mr-3 flex-shrink-0" />
                          <div>
                            <h3 className="text-sm font-medium text-red-800">Analysis Error</h3>
                            <p className="text-sm text-red-700 mt-1">{error}</p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
    
                  {data && (
                    <div className="space-y-8">
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-gray-600">Total Components</p>
                              <p className="text-3xl font-bold text-gray-900">{data.summary?.totalComponents || 0}</p>
                            </div>
                            <Layers className="w-8 h-8 text-indigo-600" />
                          </div>
                        </div>
                        
                        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-gray-600">Well Documented</p>
                              <p className="text-3xl font-bold text-green-600">{data.summary?.wellDocumented || 0}</p>
                            </div>
                            <FileText className="w-8 h-8 text-green-600" />
                          </div>
                        </div>
                        
                        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-gray-600">Deprecated</p>
                              <p className="text-3xl font-bold text-orange-600">{data.summary?.deprecatedComponents || 0}</p>
                            </div>
                            <AlertTriangle className="w-8 h-8 text-orange-600" />
                          </div>
                        </div>
                        
                        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-gray-600">Recent Updates</p>
                              <p className="text-3xl font-bold text-blue-600">{data.summary?.recentUpdates || 0}</p>
                            </div>
                            <ArrowUpRight className="w-8 h-8 text-blue-600" />
                          </div>
                        </div>
                      </div>
    
                      {enterpriseMode && enterpriseAnalytics && (
                        <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
                          <h2 className="text-2xl font-bold text-gray-900 mb-8 flex items-center">
                            <TrendingUp className="w-6 h-6 mr-3 text-indigo-600" />
                            Enterprise Analytics
                          </h2>
                          
                          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                            <div className="text-center p-4 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl">
                              <div className="text-3xl font-bold text-purple-600">{enterpriseAnalytics.totalInsertions?.toLocaleString()}</div>
                              <div className="text-sm text-gray-600 mt-1">Total Insertions</div>
                            </div>
                            <div className="text-center p-4 bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl">
                              <div className="text-3xl font-bold text-green-600">{enterpriseAnalytics.weeklyInsertions?.toLocaleString()}</div>
                              <div className="text-sm text-gray-600 mt-1">Weekly Insertions</div>
                            </div>
                            <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-xl">
                              <div className="text-3xl font-bold text-blue-600">{enterpriseAnalytics.activeTeams}</div>
                              <div className="text-sm text-gray-600 mt-1">Active Teams</div>
                            </div>
                            <div className="text-center p-4 bg-gradient-to-br from-orange-50 to-yellow-50 rounded-xl">
                              <div className="text-3xl font-bold text-orange-600">{enterpriseAnalytics.adoptionRate}%</div>
                              <div className="text-sm text-gray-600 mt-1">Adoption Rate</div>
                            </div>
                          </div>
    
                          {usageTrends && usageTrends.weeks && (
                            <div className="mt-8">
                              <h3 className="text-lg font-semibold text-gray-900 mb-4">Usage Trends</h3>
                              <div style={{ width: '100%', height: 400 }}>
                                <ResponsiveContainer>
                                  <LineChart data={usageTrends.weeks}>
                                    <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                                    <XAxis dataKey="week" stroke="#6b7280" />
                                    <YAxis stroke="#6b7280" />
                                    <Tooltip 
                                      contentStyle={{ 
                                        backgroundColor: 'white', 
                                        border: '1px solid #e5e7eb',
                                        borderRadius: '8px',
                                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                                      }} 
                                    />
                                    <Legend />
                                    <Line type="monotone" dataKey="insertions" stroke="#8884d8" strokeWidth={2} />
                                    <Line type="monotone" dataKey="detachments" stroke="#82ca9d" strokeWidth={2} />
                                  </LineChart>
                                </ResponsiveContainer>
                              </div>
                            </div>
                          )}
                        </div>
                      )}
    
                      {data.components && data.components.length > 0 && (
                        <div className="bg-white rounded-2xl shadow-xl border border-gray-100 p-8">
                          <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center">
                            <Layers className="w-6 h-6 mr-3 text-indigo-600" />
                            Component Inventory
                          </h2>
                          <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200">
                              <thead className="bg-gray-50">
                                <tr>
                                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Health Score</th>
                                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Page</th>
                                </tr>
                              </thead>
                              <tbody className="bg-white divide-y divide-gray-200">
                                {data.components.map((component, index) => (
                                  <tr key={component.id || index}>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <div className="text-sm font-medium text-gray-900">{component.name}</div>
                                      <div className="text-sm text-gray-500">{component.description || 'No description'}</div>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                                        component.healthScore >= 80 ? 'bg-green-100 text-green-800' :
                                        component.healthScore >= 60 ? 'bg-yellow-100 text-yellow-800' :
                                        'bg-red-100 text-red-800'
                                      }`}>
                                        {component.healthScore || 0}
                                      </span>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                      {component.type || 'Component'}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                      {component.pageName || 'Unknown'}
                                    </td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            );
          }
    
          ReactDOM.render(<App />, document.getElementById('root'));
        </script>
      </body>
    </html>
